import logging
from datetime import datetime

from aiogram import Bot
from apscheduler.job import Job
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

from src.database.models.reminder import Reminder  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å

# –í–∞–∂–Ω–æ: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
# –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º–∞ APScheduler'–æ–º, –ø–æ—ç—Ç–æ–º—É –ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –µ–µ
# –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–¥–µ—Å—å –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ.

logger = logging.getLogger(__name__)


# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–∞—á–∏ ---
async def send_reminder_job(bot: Bot, chat_id: int, reminder_id: int, text: str):
    """
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è APScheduler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    try:
        logger.info(
            f"Sending reminder job for reminder_id={reminder_id} to chat_id={chat_id}"
        )
        await bot.send_message(chat_id=chat_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n\n{text}")
        logger.info(f"Reminder sent successfully for reminder_id={reminder_id}")
    except Exception as e:
        logger.error(
            f"Error sending reminder job for reminder_id={reminder_id}: {e}",
            exc_info=True,
        )


class SchedulerService:
    def __init__(self, bot: Bot, scheduler: AsyncIOScheduler):
        self.bot = bot
        self.scheduler = scheduler

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        if not self.scheduler.running:
            self.scheduler.start()
            logger.info("Scheduler started.")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        if self.scheduler.running:
            self.scheduler.shutdown()
            logger.info("Scheduler stopped.")

    async def add_reminder_job(self, reminder: Reminder) -> str | None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        trigger_args = reminder.get_apscheduler_trigger_args()
        if not trigger_args:
            logger.error(
                f"Cannot schedule reminder {reminder.id}: Invalid interval data."
            )
            return None

        job_id = f"reminder_{reminder.id}"
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–∞ —Å–ª—É—á–∞–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
            await self.remove_job(job_id)

            job = self.scheduler.add_job(
                send_reminder_job,
                trigger=IntervalTrigger(**trigger_args),
                id=job_id,
                name=f"Reminder for user {reminder.user_id} (ID: {reminder.id})",
                replace_existing=True,  # –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É —Å —Ç–µ–º –∂–µ ID
                # –ü–µ—Ä–µ–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Ñ—É–Ω–∫—Ü–∏—é send_reminder_job
                kwargs={
                    "bot": self.bot,  # –ü–µ—Ä–µ–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
                    "chat_id": reminder.user_id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è = chat_id
                    "reminder_id": reminder.id,
                    "text": reminder.text,
                },
                misfire_grace_time=60 * 5,  # 5 –º–∏–Ω—É—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
            )
            logger.info(
                f"Scheduled job {job.id} for reminder {reminder.id}. Next run: {job.next_run_time}"
            )
            return job.id
        except Exception as e:
            logger.error(
                f"Error scheduling job for reminder {reminder.id}: {e}", exc_info=True
            )
            return None

    async def remove_job(self, job_id: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        try:
            existing_job = self.scheduler.get_job(job_id)
            if existing_job:
                self.scheduler.remove_job(job_id)
                logger.info(f"Removed job {job_id} from scheduler.")
                return True
            return False
        except Exception as e:
            logger.error(f"Error removing job {job_id}: {e}", exc_info=True)
            return False

    async def pause_job(self, job_id: str) -> bool:
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á—É."""
        try:
            job = self.scheduler.get_job(job_id)
            if job:
                self.scheduler.pause_job(job_id)
                logger.info(f"Paused job {job_id}.")
                return True
            logger.warning(f"Job {job_id} not found for pausing.")
            return False
        except Exception as e:
            logger.error(f"Error pausing job {job_id}: {e}", exc_info=True)
            return False

    async def resume_job(self, job_id: str) -> bool:
        """–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É."""
        try:
            job = self.scheduler.get_job(job_id)
            if job:
                self.scheduler.resume_job(job_id)
                logger.info(f"Resumed job {job_id}.")
                return True
            logger.warning(f"Job {job_id} not found for resuming.")
            return False
        except Exception as e:
            logger.error(f"Error resuming job {job_id}: {e}", exc_info=True)
            return False

    async def update_reminder_job(self, reminder: Reminder) -> str | None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É (—É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—É—é –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é)."""
        logger.info(f"Attempting to update job for reminder {reminder.id}")
        # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        return await self.add_reminder_job(reminder)
