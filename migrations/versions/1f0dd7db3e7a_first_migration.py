"""First migration

Revision ID: 1f0dd7db3e7a
Revises:
Create Date: 2025-04-28 23:03:21.681662

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "1f0dd7db3e7a"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "chats",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("tg_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "type",
            sa.Enum("private", "channel", "group", "supergroup", name="typeofchat"),
            nullable=False,
        ),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("username", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__chats")),
        sa.UniqueConstraint("tg_id", name=op.f("uq__chats__tg_id")),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("tg_id", sa.BigInteger(), nullable=False),
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("last_name", sa.String(), nullable=True),
        sa.Column("username", sa.String(), nullable=True),
        sa.Column("is_bot", sa.Boolean(), nullable=False),
        sa.Column("is_banned", sa.Boolean(), nullable=True),
        sa.Column("is_admin", sa.Boolean(), nullable=False),
        sa.Column("language_code", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__users")),
        sa.UniqueConstraint("tg_id", name=op.f("uq__users__tg_id")),
    )
    op.create_table(
        "reminders",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("text", sa.String(length=255), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "frequency_type",
            sa.Enum(
                "DAILY",
                "WEEKLY",
                "MONTHLY",
                "YEARLY",
                "OTHER",
                name="frequency_type_enum",
            ),
            nullable=False,
        ),
        sa.Column("custom_frequency", sa.JSON(), nullable=True),
        sa.Column("start_datetime", sa.DateTime(timezone=True), nullable=False),
        sa.Column("apscheduler_job_id", sa.String(length=255), nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk__reminders__user_id__users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__reminders")),
    )
    op.create_index(
        op.f("ix__reminders_apscheduler_job_id"),
        "reminders",
        ["apscheduler_job_id"],
        unique=True,
    )
    op.create_index(
        op.f("ix__reminders_frequency_type"),
        "reminders",
        ["frequency_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix__reminders_is_active"), "reminders", ["is_active"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix__reminders_is_active"), table_name="reminders")
    op.drop_index(op.f("ix__reminders_frequency_type"), table_name="reminders")
    op.drop_index(op.f("ix__reminders_apscheduler_job_id"), table_name="reminders")
    op.drop_table("reminders")
    op.drop_table("users")
    op.drop_table("chats")
    # ### end Alembic commands ###
